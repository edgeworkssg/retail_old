//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace MassMailer.MembershipWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FetchMembersPastTransactionSoap", Namespace="http://tempuri.org/")]
    public partial class FetchMembersPastTransaction : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FetchHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchMembershipReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchMembershipGroupNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FetchMembersPastTransaction() {
            this.Url = "http://localhost:6733/PowerPOSWeb/FetchMembersPastTransaction.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FetchHistoryCompletedEventHandler FetchHistoryCompleted;
        
        /// <remarks/>
        public event FetchMembershipReportCompletedEventHandler FetchMembershipReportCompleted;
        
        /// <remarks/>
        public event FetchMembershipGroupNameCompletedEventHandler FetchMembershipGroupNameCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchHistory(string membershipNo) {
            object[] results = this.Invoke("FetchHistory", new object[] {
                        membershipNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchHistoryAsync(string membershipNo) {
            this.FetchHistoryAsync(membershipNo, null);
        }
        
        /// <remarks/>
        public void FetchHistoryAsync(string membershipNo, object userState) {
            if ((this.FetchHistoryOperationCompleted == null)) {
                this.FetchHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchHistoryOperationCompleted);
            }
            this.InvokeAsync("FetchHistory", new object[] {
                        membershipNo}, this.FetchHistoryOperationCompleted, userState);
        }
        
        private void OnFetchHistoryOperationCompleted(object arg) {
            if ((this.FetchHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchHistoryCompleted(this, new FetchHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchMembershipReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchMembershipReport(bool useStartMembershipDate, bool useEndMembershipDate, System.DateTime StartMembershipDate, System.DateTime EndMembershipDate, bool useStartBirthDate, bool useEndBirthDate, System.DateTime StartBirthDate, System.DateTime EndBirthDate, string StartMembershipNo, string EndMembershipNo, int ViewGroupID, string SortColumn, string SortDir, string username) {
            object[] results = this.Invoke("FetchMembershipReport", new object[] {
                        useStartMembershipDate,
                        useEndMembershipDate,
                        StartMembershipDate,
                        EndMembershipDate,
                        useStartBirthDate,
                        useEndBirthDate,
                        StartBirthDate,
                        EndBirthDate,
                        StartMembershipNo,
                        EndMembershipNo,
                        ViewGroupID,
                        SortColumn,
                        SortDir,
                        username});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchMembershipReportAsync(bool useStartMembershipDate, bool useEndMembershipDate, System.DateTime StartMembershipDate, System.DateTime EndMembershipDate, bool useStartBirthDate, bool useEndBirthDate, System.DateTime StartBirthDate, System.DateTime EndBirthDate, string StartMembershipNo, string EndMembershipNo, int ViewGroupID, string SortColumn, string SortDir, string username) {
            this.FetchMembershipReportAsync(useStartMembershipDate, useEndMembershipDate, StartMembershipDate, EndMembershipDate, useStartBirthDate, useEndBirthDate, StartBirthDate, EndBirthDate, StartMembershipNo, EndMembershipNo, ViewGroupID, SortColumn, SortDir, username, null);
        }
        
        /// <remarks/>
        public void FetchMembershipReportAsync(bool useStartMembershipDate, bool useEndMembershipDate, System.DateTime StartMembershipDate, System.DateTime EndMembershipDate, bool useStartBirthDate, bool useEndBirthDate, System.DateTime StartBirthDate, System.DateTime EndBirthDate, string StartMembershipNo, string EndMembershipNo, int ViewGroupID, string SortColumn, string SortDir, string username, object userState) {
            if ((this.FetchMembershipReportOperationCompleted == null)) {
                this.FetchMembershipReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchMembershipReportOperationCompleted);
            }
            this.InvokeAsync("FetchMembershipReport", new object[] {
                        useStartMembershipDate,
                        useEndMembershipDate,
                        StartMembershipDate,
                        EndMembershipDate,
                        useStartBirthDate,
                        useEndBirthDate,
                        StartBirthDate,
                        EndBirthDate,
                        StartMembershipNo,
                        EndMembershipNo,
                        ViewGroupID,
                        SortColumn,
                        SortDir,
                        username}, this.FetchMembershipReportOperationCompleted, userState);
        }
        
        private void OnFetchMembershipReportOperationCompleted(object arg) {
            if ((this.FetchMembershipReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchMembershipReportCompleted(this, new FetchMembershipReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchMembershipGroupName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchMembershipGroupName() {
            object[] results = this.Invoke("FetchMembershipGroupName", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchMembershipGroupNameAsync() {
            this.FetchMembershipGroupNameAsync(null);
        }
        
        /// <remarks/>
        public void FetchMembershipGroupNameAsync(object userState) {
            if ((this.FetchMembershipGroupNameOperationCompleted == null)) {
                this.FetchMembershipGroupNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchMembershipGroupNameOperationCompleted);
            }
            this.InvokeAsync("FetchMembershipGroupName", new object[0], this.FetchMembershipGroupNameOperationCompleted, userState);
        }
        
        private void OnFetchMembershipGroupNameOperationCompleted(object arg) {
            if ((this.FetchMembershipGroupNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchMembershipGroupNameCompleted(this, new FetchMembershipGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Login(string username, string encryptedPassword, out string status) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        encryptedPassword});
            status = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string encryptedPassword) {
            this.LoginAsync(username, encryptedPassword, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string encryptedPassword, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        encryptedPassword}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FetchHistoryCompletedEventHandler(object sender, FetchHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FetchMembershipReportCompletedEventHandler(object sender, FetchMembershipReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchMembershipReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchMembershipReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FetchMembershipGroupNameCompletedEventHandler(object sender, FetchMembershipGroupNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchMembershipGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchMembershipGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591