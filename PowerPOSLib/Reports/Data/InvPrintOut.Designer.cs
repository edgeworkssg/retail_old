//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PowerPOSLib.Reports.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InvPrintOut")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InvPrintOut : global::System.Data.DataSet {
        
        private PrintOutDataTable tablePrintOut;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvPrintOut() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InvPrintOut(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PrintOut"] != null)) {
                    base.Tables.Add(new PrintOutDataTable(ds.Tables["PrintOut"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintOutDataTable PrintOut {
            get {
                return this.tablePrintOut;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InvPrintOut cln = ((InvPrintOut)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PrintOut"] != null)) {
                    base.Tables.Add(new PrintOutDataTable(ds.Tables["PrintOut"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrintOut = ((PrintOutDataTable)(base.Tables["PrintOut"]));
            if ((initTable == true)) {
                if ((this.tablePrintOut != null)) {
                    this.tablePrintOut.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InvPrintOut";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InvPrintOut.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrintOut = new PrintOutDataTable();
            base.Tables.Add(this.tablePrintOut);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintOut() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InvPrintOut ds = new InvPrintOut();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PrintOutRowChangeEventHandler(object sender, PrintOutRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintOutDataTable : global::System.Data.TypedTableBase<PrintOutRow> {
            
            private global::System.Data.DataColumn columnHeaderRefNo;
            
            private global::System.Data.DataColumn columnPoType;
            
            private global::System.Data.DataColumn columnHeaderCreatedOn;
            
            private global::System.Data.DataColumn columnSentInventoryDate;
            
            private global::System.Data.DataColumn columnFromInventoryLocID;
            
            private global::System.Data.DataColumn columnFromInventoryLocName;
            
            private global::System.Data.DataColumn columnFromInventoryLocAddress;
            
            private global::System.Data.DataColumn columnReceivedInventoryDate;
            
            private global::System.Data.DataColumn columnToInventoryLocID;
            
            private global::System.Data.DataColumn columnToInventoryLocName;
            
            private global::System.Data.DataColumn columnToInventoryLocAddress;
            
            private global::System.Data.DataColumn columnItemNo;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnApprovedQty;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnBarcode;
            
            private global::System.Data.DataColumn columnBarcodeImage;
            
            private global::System.Data.DataColumn columnRequestedBy;
            
            private global::System.Data.DataColumn columnSalesPerson;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutDataTable() {
                this.TableName = "PrintOut";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintOutDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintOutDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderRefNoColumn {
                get {
                    return this.columnHeaderRefNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoTypeColumn {
                get {
                    return this.columnPoType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderCreatedOnColumn {
                get {
                    return this.columnHeaderCreatedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SentInventoryDateColumn {
                get {
                    return this.columnSentInventoryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromInventoryLocIDColumn {
                get {
                    return this.columnFromInventoryLocID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromInventoryLocNameColumn {
                get {
                    return this.columnFromInventoryLocName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromInventoryLocAddressColumn {
                get {
                    return this.columnFromInventoryLocAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedInventoryDateColumn {
                get {
                    return this.columnReceivedInventoryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToInventoryLocIDColumn {
                get {
                    return this.columnToInventoryLocID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToInventoryLocNameColumn {
                get {
                    return this.columnToInventoryLocName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToInventoryLocAddressColumn {
                get {
                    return this.columnToInventoryLocAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNoColumn {
                get {
                    return this.columnItemNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedQtyColumn {
                get {
                    return this.columnApprovedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeColumn {
                get {
                    return this.columnBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeImageColumn {
                get {
                    return this.columnBarcodeImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedByColumn {
                get {
                    return this.columnRequestedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesPersonColumn {
                get {
                    return this.columnSalesPerson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutRow this[int index] {
                get {
                    return ((PrintOutRow)(this.Rows[index]));
                }
            }
            
            public event PrintOutRowChangeEventHandler PrintOutRowChanging;
            
            public event PrintOutRowChangeEventHandler PrintOutRowChanged;
            
            public event PrintOutRowChangeEventHandler PrintOutRowDeleting;
            
            public event PrintOutRowChangeEventHandler PrintOutRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintOutRow(PrintOutRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutRow AddPrintOutRow(
                        string HeaderRefNo, 
                        string PoType, 
                        System.DateTime HeaderCreatedOn, 
                        System.DateTime SentInventoryDate, 
                        int FromInventoryLocID, 
                        string FromInventoryLocName, 
                        string FromInventoryLocAddress, 
                        System.DateTime ReceivedInventoryDate, 
                        string ToInventoryLocID, 
                        string ToInventoryLocName, 
                        string ToInventoryLocAddress, 
                        string ItemNo, 
                        string ItemName, 
                        decimal Qty, 
                        decimal ApprovedQty, 
                        string Remark, 
                        string Barcode, 
                        byte[] BarcodeImage, 
                        string RequestedBy, 
                        string SalesPerson, 
                        string CategoryName) {
                PrintOutRow rowPrintOutRow = ((PrintOutRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HeaderRefNo,
                        PoType,
                        HeaderCreatedOn,
                        SentInventoryDate,
                        FromInventoryLocID,
                        FromInventoryLocName,
                        FromInventoryLocAddress,
                        ReceivedInventoryDate,
                        ToInventoryLocID,
                        ToInventoryLocName,
                        ToInventoryLocAddress,
                        ItemNo,
                        ItemName,
                        Qty,
                        ApprovedQty,
                        Remark,
                        Barcode,
                        BarcodeImage,
                        RequestedBy,
                        SalesPerson,
                        CategoryName};
                rowPrintOutRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintOutRow);
                return rowPrintOutRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintOutDataTable cln = ((PrintOutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintOutDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeaderRefNo = base.Columns["HeaderRefNo"];
                this.columnPoType = base.Columns["PoType"];
                this.columnHeaderCreatedOn = base.Columns["HeaderCreatedOn"];
                this.columnSentInventoryDate = base.Columns["SentInventoryDate"];
                this.columnFromInventoryLocID = base.Columns["FromInventoryLocID"];
                this.columnFromInventoryLocName = base.Columns["FromInventoryLocName"];
                this.columnFromInventoryLocAddress = base.Columns["FromInventoryLocAddress"];
                this.columnReceivedInventoryDate = base.Columns["ReceivedInventoryDate"];
                this.columnToInventoryLocID = base.Columns["ToInventoryLocID"];
                this.columnToInventoryLocName = base.Columns["ToInventoryLocName"];
                this.columnToInventoryLocAddress = base.Columns["ToInventoryLocAddress"];
                this.columnItemNo = base.Columns["ItemNo"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnQty = base.Columns["Qty"];
                this.columnApprovedQty = base.Columns["ApprovedQty"];
                this.columnRemark = base.Columns["Remark"];
                this.columnBarcode = base.Columns["Barcode"];
                this.columnBarcodeImage = base.Columns["BarcodeImage"];
                this.columnRequestedBy = base.Columns["RequestedBy"];
                this.columnSalesPerson = base.Columns["SalesPerson"];
                this.columnCategoryName = base.Columns["CategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeaderRefNo = new global::System.Data.DataColumn("HeaderRefNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderRefNo);
                this.columnPoType = new global::System.Data.DataColumn("PoType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoType);
                this.columnHeaderCreatedOn = new global::System.Data.DataColumn("HeaderCreatedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderCreatedOn);
                this.columnSentInventoryDate = new global::System.Data.DataColumn("SentInventoryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSentInventoryDate);
                this.columnFromInventoryLocID = new global::System.Data.DataColumn("FromInventoryLocID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromInventoryLocID);
                this.columnFromInventoryLocName = new global::System.Data.DataColumn("FromInventoryLocName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromInventoryLocName);
                this.columnFromInventoryLocAddress = new global::System.Data.DataColumn("FromInventoryLocAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromInventoryLocAddress);
                this.columnReceivedInventoryDate = new global::System.Data.DataColumn("ReceivedInventoryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedInventoryDate);
                this.columnToInventoryLocID = new global::System.Data.DataColumn("ToInventoryLocID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToInventoryLocID);
                this.columnToInventoryLocName = new global::System.Data.DataColumn("ToInventoryLocName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToInventoryLocName);
                this.columnToInventoryLocAddress = new global::System.Data.DataColumn("ToInventoryLocAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToInventoryLocAddress);
                this.columnItemNo = new global::System.Data.DataColumn("ItemNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemNo);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnApprovedQty = new global::System.Data.DataColumn("ApprovedQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedQty);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnBarcode = new global::System.Data.DataColumn("Barcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcode);
                this.columnBarcodeImage = new global::System.Data.DataColumn("BarcodeImage", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcodeImage);
                this.columnRequestedBy = new global::System.Data.DataColumn("RequestedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedBy);
                this.columnSalesPerson = new global::System.Data.DataColumn("SalesPerson", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesPerson);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutRow NewPrintOutRow() {
                return ((PrintOutRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintOutRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintOutRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintOutRowChanged != null)) {
                    this.PrintOutRowChanged(this, new PrintOutRowChangeEvent(((PrintOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintOutRowChanging != null)) {
                    this.PrintOutRowChanging(this, new PrintOutRowChangeEvent(((PrintOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintOutRowDeleted != null)) {
                    this.PrintOutRowDeleted(this, new PrintOutRowChangeEvent(((PrintOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintOutRowDeleting != null)) {
                    this.PrintOutRowDeleting(this, new PrintOutRowChangeEvent(((PrintOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintOutRow(PrintOutRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvPrintOut ds = new InvPrintOut();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintOutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintOutRow : global::System.Data.DataRow {
            
            private PrintOutDataTable tablePrintOut;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintOutRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintOut = ((PrintOutDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderRefNo {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.HeaderRefNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderRefNo\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.HeaderRefNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoType {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.PoTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoType\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.PoTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HeaderCreatedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintOut.HeaderCreatedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderCreatedOn\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.HeaderCreatedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SentInventoryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintOut.SentInventoryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SentInventoryDate\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.SentInventoryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FromInventoryLocID {
                get {
                    try {
                        return ((int)(this[this.tablePrintOut.FromInventoryLocIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromInventoryLocID\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.FromInventoryLocIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromInventoryLocName {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.FromInventoryLocNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromInventoryLocName\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.FromInventoryLocNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromInventoryLocAddress {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.FromInventoryLocAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromInventoryLocAddress\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.FromInventoryLocAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReceivedInventoryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintOut.ReceivedInventoryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceivedInventoryDate\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ReceivedInventoryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToInventoryLocID {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.ToInventoryLocIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToInventoryLocID\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ToInventoryLocIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToInventoryLocName {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.ToInventoryLocNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToInventoryLocName\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ToInventoryLocNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToInventoryLocAddress {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.ToInventoryLocAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToInventoryLocAddress\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ToInventoryLocAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemNo {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.ItemNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemNo\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ItemNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Qty {
                get {
                    try {
                        return ((decimal)(this[this.tablePrintOut.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ApprovedQty {
                get {
                    try {
                        return ((decimal)(this[this.tablePrintOut.ApprovedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedQty\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.ApprovedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barcode {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.BarcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barcode\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.BarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] BarcodeImage {
                get {
                    try {
                        return ((byte[])(this[this.tablePrintOut.BarcodeImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarcodeImage\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.BarcodeImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestedBy {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.RequestedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestedBy\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.RequestedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesPerson {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.SalesPersonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesPerson\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.SalesPersonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tablePrintOut.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'PrintOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintOut.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderRefNoNull() {
                return this.IsNull(this.tablePrintOut.HeaderRefNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderRefNoNull() {
                this[this.tablePrintOut.HeaderRefNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoTypeNull() {
                return this.IsNull(this.tablePrintOut.PoTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoTypeNull() {
                this[this.tablePrintOut.PoTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderCreatedOnNull() {
                return this.IsNull(this.tablePrintOut.HeaderCreatedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderCreatedOnNull() {
                this[this.tablePrintOut.HeaderCreatedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSentInventoryDateNull() {
                return this.IsNull(this.tablePrintOut.SentInventoryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSentInventoryDateNull() {
                this[this.tablePrintOut.SentInventoryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromInventoryLocIDNull() {
                return this.IsNull(this.tablePrintOut.FromInventoryLocIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromInventoryLocIDNull() {
                this[this.tablePrintOut.FromInventoryLocIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromInventoryLocNameNull() {
                return this.IsNull(this.tablePrintOut.FromInventoryLocNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromInventoryLocNameNull() {
                this[this.tablePrintOut.FromInventoryLocNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromInventoryLocAddressNull() {
                return this.IsNull(this.tablePrintOut.FromInventoryLocAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromInventoryLocAddressNull() {
                this[this.tablePrintOut.FromInventoryLocAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedInventoryDateNull() {
                return this.IsNull(this.tablePrintOut.ReceivedInventoryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedInventoryDateNull() {
                this[this.tablePrintOut.ReceivedInventoryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToInventoryLocIDNull() {
                return this.IsNull(this.tablePrintOut.ToInventoryLocIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToInventoryLocIDNull() {
                this[this.tablePrintOut.ToInventoryLocIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToInventoryLocNameNull() {
                return this.IsNull(this.tablePrintOut.ToInventoryLocNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToInventoryLocNameNull() {
                this[this.tablePrintOut.ToInventoryLocNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToInventoryLocAddressNull() {
                return this.IsNull(this.tablePrintOut.ToInventoryLocAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToInventoryLocAddressNull() {
                this[this.tablePrintOut.ToInventoryLocAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNoNull() {
                return this.IsNull(this.tablePrintOut.ItemNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNoNull() {
                this[this.tablePrintOut.ItemNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tablePrintOut.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tablePrintOut.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tablePrintOut.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tablePrintOut.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedQtyNull() {
                return this.IsNull(this.tablePrintOut.ApprovedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedQtyNull() {
                this[this.tablePrintOut.ApprovedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tablePrintOut.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tablePrintOut.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodeNull() {
                return this.IsNull(this.tablePrintOut.BarcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodeNull() {
                this[this.tablePrintOut.BarcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodeImageNull() {
                return this.IsNull(this.tablePrintOut.BarcodeImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodeImageNull() {
                this[this.tablePrintOut.BarcodeImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestedByNull() {
                return this.IsNull(this.tablePrintOut.RequestedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestedByNull() {
                this[this.tablePrintOut.RequestedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesPersonNull() {
                return this.IsNull(this.tablePrintOut.SalesPersonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesPersonNull() {
                this[this.tablePrintOut.SalesPersonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tablePrintOut.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNameNull() {
                this[this.tablePrintOut.CategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintOutRowChangeEvent : global::System.EventArgs {
            
            private PrintOutRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutRowChangeEvent(PrintOutRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintOutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591