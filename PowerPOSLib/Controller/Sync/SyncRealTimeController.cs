using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic;
using System.Collections;
using PowerPOS.Container;

namespace PowerPOS
{
    public static class SyncRealTimeController
    {
        private static string[] ProhibitedTable = 
        { 
            "AccessLog",
            "AppSetting",
            "AttendanceSheet",
            "AttributesLabel",
            "CashRecording",
            "Company",
            "CommissionStructure",
            "CounterCloseLog",
            "Course",
            "Dashboard",
            "DeliveryOrder",
            "DeliveryOrderDetails",
            "EmailNotification",
            "EventAttendance",
            "EventItemMap",
            "EventLocationMap",
            "ExchangeLog",
            "EZlinkMessage",
            "EZLinkMessageParameter",
            "EZLinkMessageParameterMap",
            "EZLinkMsgLog",
            "EZLinkResponseCode",
            "EZLinkUnCfmLog",
            "Family",
            "FamilyGroupMap",
            "FeedBackLog",
            "FeedBackMsg",
            "Installment",
            "InstallmentDetail",
            "InventoryDet",
            "InventoryHdr",
            "InventoryTransferDiscrepancy",
            "InventoryUpdateLog",
            "ItemSummary",
            "LineInfo",
            "LocationTransfer",
            "LoginActivity",
            "MembershipPoints",
            "MembershipAttendance",
            "MembershipTap",
            "MembershipTapsLog",
            "MembershipUpgradeLog",
            "OrderDet",
            "OrderHdr",
            "PackageDet",
            "PackageHdr",
            "PackageRedemptionLog",
            "PointAllocationLog",
            "PowerLog",
            "PreOrderRecord",
            "PreOrderSchedule",
            "PriceScheme",
            "Project",
            "PurchaseOrderDet",
            "PurchaseOrderDetail",
            "PurchaseOrderHdr",
            "PurchaseOrderHeader",
            "ReceiptDet",
            "ReceiptHdr",
            "RedeemLog",
            "RedemptionItem",
            "RedemptionLog",
            "SalesCommissionHistory",
            "SalesCommissionRecord",
            "Setting",
            "StockTake",
            "VoidLog",
            "Z2ClosingLog"
        };

        public static bool UpdateModifiedOn(string tableName, string pkColumn)
        {
            bool isSuccess = false;

            try
            {
                                bool isAllowedToUpdate = true;
                foreach (var tblName in ProhibitedTable)
                {
                    if (tblName.ToUpper().Equals(tableName.ToUpper()))
                    {
                        isAllowedToUpdate = false;
                        break;
                    }
                }

                if (isAllowedToUpdate)
                {
                    string sql = @"DECLARE @IdTable AS TABLE (TheID NVARCHAR(500));
                                DECLARE @PointerId AS NVARCHAR(500);

                                INSERT INTO @IdTable
                                SELECT {1} FROM {0} ORDER BY {1}

                                SET @PointerId = (SELECT TOP 1 TheID FROM @IdTable ORDER BY TheID)
                                DELETE @IdTable WHERE TheID = @PointerId

                                WHILE @PointerId IS NOT NULL BEGIN
	                                UPDATE {0} SET ModifiedOn = GETDATE() WHERE {1} = @PointerId
	                                SET @PointerId = (SELECT TOP 1 TheID FROM @IdTable ORDER BY TheID)
	                                DELETE @IdTable WHERE TheID = @PointerId	
	                                WAITFOR DELAY '00:00:00.010'
                                END";
                    sql = string.Format(sql, tableName, pkColumn);
                    DataService.ExecuteQuery(new QueryCommand(sql));

                    isSuccess = true;
                }
                else
                {
                    throw new Exception("Not Allowed to Update Table : " + tableName);
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                Logger.writeLog(ex);
            }

            return isSuccess;
        }

        public static bool DownloadData(DataSet ds, string tableName, string primaryKeyName, bool isPKAutoGenerated)
        {
            QueryCommandCollection retCmdColl;
            return DownloadData(ds, tableName, primaryKeyName, isPKAutoGenerated, false, out retCmdColl);
        }

        public static bool DownloadData(DataSet ds, string tableName, string primaryKeyName, bool isPKAutoGenerated, bool isGenerateCommandOnly, out QueryCommandCollection retCmdColl)
        {
            bool isSuccess = false;
            string insertSql = "";
            string columnList = "";
            string parameterList = "";
            retCmdColl = new QueryCommandCollection();

            try
            {
                QueryCommandCollection cmd; QueryCommand mycmd;
                Query qry; Where whr;
                ArrayList Columns, Parameters;

                #region *) Remove Unrecognized Columns

                try
                {
                    List<string> listToRemove = new List<string>();
                    string sqlCheckColumn = @"SELECT C.name AS ColumnName
                                          FROM   sys.columns C
                                          WHERE  C.object_id = OBJECT_ID('{0}')";
                    sqlCheckColumn = string.Format(sqlCheckColumn, tableName);
                    DataTable dtColumn = new DataTable();
                    dtColumn.Load(DataService.GetReader(new QueryCommand(sqlCheckColumn)));
                    for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                    {
                        bool isExist = (from o in dtColumn.AsEnumerable()
                                        where (o.Field<string>("ColumnName")+"").ToLower() == ds.Tables[0].Columns[i].ColumnName.ToLower()
                                        select o.Field<string>("ColumnName")).ToList().Count > 0;
                        if (!isExist)
                            listToRemove.Add(ds.Tables[0].Columns[i].ColumnName);
                    }
                    foreach (var theCol in listToRemove)
                    {
                        ds.Tables[0].Columns.Remove(theCol);
                    }
                }
                catch (Exception X1)
                {
                    Logger.writeLog(X1);
                }

                #endregion

                cmd = new QueryCommandCollection();
                if (isPKAutoGenerated)
                {
                    mycmd = new QueryCommand("SET IDENTITY_INSERT " + tableName + " ON;");
                    cmd.Add(mycmd);
                }

                Columns = new ArrayList(); 
                Parameters = new ArrayList();

                for (int i = 0; i < ds.Tables[0].Columns.Count - 1; i++)
                {
                    columnList += "[" + ds.Tables[0].Columns[i].ColumnName + "],";
                    parameterList += "@" + ds.Tables[0].Columns[i].ColumnName + ",";
                    Columns.Add(ds.Tables[0].Columns[i].ColumnName);
                    Parameters.Add("@" + ds.Tables[0].Columns[i].ColumnName);
                }

                columnList += ds.Tables[0].Columns[ds.Tables[0].Columns.Count - 1].ColumnName;
                parameterList += "@" + ds.Tables[0].Columns[ds.Tables[0].Columns.Count - 1].ColumnName;
                Columns.Add(ds.Tables[0].Columns[ds.Tables[0].Columns.Count - 1].ColumnName);
                Parameters.Add("@" + ds.Tables[0].Columns[ds.Tables[0].Columns.Count - 1].ColumnName);

                //Create Active Record from table                                                
                insertSql = "INSERT INTO " + tableName + " (" + columnList + ")";
                insertSql += " VALUES (" + parameterList + ") ";

                qry = new Query(tableName);
                whr = new Where();
                whr.ColumnName = primaryKeyName;
                whr.Comparison = Comparison.Equals;
                whr.ParameterName = "@" + primaryKeyName;

                bool hasDeleteColumn = false;
                if (ds.Tables[0].Columns.Contains("Deleted"))
                {
                    hasDeleteColumn = true;
                }


                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    //where clause to check the type
                    //if guid, need to convert to string
                    DateTime modifiedOn = DateTime.Now;
                    for (int j = 0; j < ds.Tables[0].Columns.Count; j++)
                    {
                        if (ds.Tables[0].Columns[j].ColumnName.ToLower() == "modifiedon")
                        {
                            modifiedOn = (DateTime)(ds.Tables[0].Rows[i][j]);
                            break;
                        }
                    }

                    if (ds.Tables[0].Rows[i][primaryKeyName] is Guid)
                    {
                        whr.ParameterValue = ds.Tables[0].Rows[i][primaryKeyName].ToString();
                    }
                    //if nvarchar
                    else if (ds.Tables[0].Rows[i][primaryKeyName] is String)
                    {
                        whr.DbType = DbType.String; //returning sql datatype nvarchar
                        whr.ParameterValue = ds.Tables[0].Rows[i][primaryKeyName].ToString();
                    }
                    else
                    {
                        whr.ParameterValue = ds.Tables[0].Rows[i][primaryKeyName];
                    }

                    int NumberOfRowWithSamePrimaryKey = qry.GetCount(primaryKeyName, whr);

                    if (NumberOfRowWithSamePrimaryKey > 0)
                    {
                        //if (hasDeleteColumn && ds.Tables[0].Rows[i]["Deleted"] is bool && (bool)ds.Tables[0].Rows[i]["Deleted"] == true)
                        //{
                        //    //it's delete                            
                        //    Query qrytmp = new Query(tableName);
                        //    qrytmp.AddWhere(primaryKeyName, ds.Tables[0].Rows[i][primaryKeyName]);
                        //    qrytmp.AddUpdateSetting("Deleted", true);
                        //    qrytmp.QueryType = QueryType.Update;
                        //    mycmd = qrytmp.BuildUpdateCommand();
                        //}
                        //else
                        //{
                        //if exist, do update
                        Query qrytmp = new Query(tableName);
                        qrytmp.AddWhere(primaryKeyName, ds.Tables[0].Rows[i][primaryKeyName]);
                        for (int k = 0; k < ds.Tables[0].Columns.Count; k++)
                        {
                            if (ds.Tables[0].Columns[k].ToString().ToLower() != primaryKeyName.ToLower())
                                qrytmp.AddUpdateSetting(ds.Tables[0].Columns[k].ToString(), ds.Tables[0].Rows[i][k]);
                        }
                        qrytmp.QueryType = QueryType.Update;
                        mycmd = qrytmp.BuildUpdateCommand();
                        //}
                    }
                    else
                    {
                        mycmd = new QueryCommand(insertSql, "PowerPOS");

                        for (int k = 0; k < Columns.Count; k++)
                        {

                            if (ds.Tables[0].Columns[Columns[k].ToString()].DataType == System.Type.GetType("System.Guid"))
                            {
                                //check if null don't convert 
                                if (ds.Tables[0].Rows[i][Columns[k].ToString()] == null || ds.Tables[0].Rows[i][Columns[k].ToString()].ToString() == "")
                                {
                                    mycmd.AddParameter(Parameters[k].ToString(),
                                       null, DataService.GetSchema(tableName, "PowerPOS").
                                           GetColumn(Columns[k].ToString()).DataType);
                                }
                                else
                                {
                                    mycmd.AddParameter(Parameters[k].ToString(),
                                        (new Guid(ds.Tables[0].Rows[i][Columns[k].
                                            ToString()].ToString())).ToString(),
                                            DataService.GetSchema(tableName, "PowerPOS").
                                            GetColumn(Columns[k].ToString()).DataType);
                                }
                            }
                            else
                            {
                                mycmd.AddParameter
                                    (Parameters[k].ToString(),
                                    ds.Tables[0].Rows[i][Columns[k].ToString()],
                                    DataService.GetSchema(tableName, "PowerPOS").
                                    GetColumn(Columns[k].ToString()).DataType);
                            }
                        }
                    }
                    SetModifiedOn(mycmd, modifiedOn);
                    cmd.Add(mycmd);
                }
                if (isPKAutoGenerated)
                {
                    mycmd = new QueryCommand("SET IDENTITY_INSERT " + tableName + " OFF;"); //Ignore column 0 if it is identity column
                    cmd.Add(mycmd);
                }
                if (cmd.Count > 0)
                {
                    retCmdColl = cmd;
                    if (!isGenerateCommandOnly)
                        DataService.ExecuteTransaction(cmd);
                }

                isSuccess = true;
            }
            catch (Exception ex)
            {
                Logger.writeLog(ex);
            }

            return isSuccess;
        }

        public static bool DownloadDataWithDataTable(DataTable dt, string tableName, string primaryKeyName, bool isPKAutoGenerated)
        {
            bool isSuccess = false;
            string insertSql = "";
            string columnList = "";
            string parameterList = "";

            try
            {
                QueryCommandCollection cmd; QueryCommand mycmd;
                Query qry; Where whr;
                ArrayList Columns, Parameters;

                #region *) Remove Unrecognized Columns

                try
                {
                    List<string> listToRemove = new List<string>();
                    string sqlCheckColumn = @"SELECT C.name AS ColumnName
                                          FROM   sys.columns C
                                          WHERE  C.object_id = OBJECT_ID('{0}')";
                    sqlCheckColumn = string.Format(sqlCheckColumn, tableName);
                    DataTable dtColumn = new DataTable();
                    dtColumn.Load(DataService.GetReader(new QueryCommand(sqlCheckColumn)));
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        bool isExist = (from o in dtColumn.AsEnumerable()
                                        where (o.Field<string>("ColumnName") + "").ToLower() == dt.Columns[i].ColumnName.ToLower()
                                        select o.Field<string>("ColumnName")).ToList().Count > 0;
                        if (!isExist)
                            listToRemove.Add(dt.Columns[i].ColumnName);
                    }
                    foreach (var theCol in listToRemove)
                    {
                        dt.Columns.Remove(theCol);
                    }
                }
                catch (Exception X1)
                {
                    Logger.writeLog(X1);
                }

                #endregion

                cmd = new QueryCommandCollection();
                if (isPKAutoGenerated)
                {
                    mycmd = new QueryCommand("SET IDENTITY_INSERT " + tableName + " ON;");
                    cmd.Add(mycmd);
                }

                Columns = new ArrayList();
                Parameters = new ArrayList();

                for (int i = 0; i < dt.Columns.Count - 1; i++)
                {
                    columnList += "[" + dt.Columns[i].ColumnName + "],";
                    parameterList += "@" + dt.Columns[i].ColumnName + ",";
                    Columns.Add(dt.Columns[i].ColumnName);
                    Parameters.Add("@" + dt.Columns[i].ColumnName);
                }

                columnList += dt.Columns[dt.Columns.Count - 1].ColumnName;
                parameterList += "@" + dt.Columns[dt.Columns.Count - 1].ColumnName;
                Columns.Add(dt.Columns[dt.Columns.Count - 1].ColumnName);
                Parameters.Add("@" + dt.Columns[dt.Columns.Count - 1].ColumnName);

                //Create Active Record from table                                                
                insertSql = "INSERT INTO " + tableName + " (" + columnList + ")";
                insertSql += " VALUES (" + parameterList + ") ";

                qry = new Query(tableName);
                whr = new Where();
                whr.ColumnName = primaryKeyName;
                whr.Comparison = Comparison.Equals;
                whr.ParameterName = "@" + primaryKeyName;

                bool hasDeleteColumn = false;
                if (dt.Columns.Contains("Deleted"))
                {
                    hasDeleteColumn = true;
                }


                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //where clause to check the type
                    //if guid, need to convert to string
                    DateTime modifiedOn = DateTime.Now;
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        if (dt.Columns[j].ColumnName.ToLower() == "modifiedon")
                        {
                            modifiedOn = (DateTime)(dt.Rows[i][j]);
                            break;
                        }
                    }

                    if (dt.Rows[i][primaryKeyName] is Guid)
                    {
                        whr.ParameterValue = dt.Rows[i][primaryKeyName].ToString();
                    }
                    //if nvarchar
                    else if (dt.Rows[i][primaryKeyName] is String)
                    {
                        whr.DbType = DbType.String; //returning sql datatype nvarchar
                        whr.ParameterValue = dt.Rows[i][primaryKeyName].ToString();
                    }
                    else
                    {
                        whr.ParameterValue = dt.Rows[i][primaryKeyName];
                    }

                    int NumberOfRowWithSamePrimaryKey = qry.GetCount(primaryKeyName, whr);

                    if (NumberOfRowWithSamePrimaryKey > 0)
                    {
                        //if (hasDeleteColumn && dt.Rows[i]["Deleted"] is bool && (bool)dt.Rows[i]["Deleted"] == true)
                        //{
                        //    //it's delete                            
                        //    Query qrytmp = new Query(tableName);
                        //    qrytmp.AddWhere(primaryKeyName, dt.Rows[i][primaryKeyName]);
                        //    qrytmp.AddUpdateSetting("Deleted", true);
                        //    qrytmp.QueryType = QueryType.Update;
                        //    mycmd = qrytmp.BuildUpdateCommand();
                        //}
                        //else
                        //{
                        //if exist, do update
                        Query qrytmp = new Query(tableName);
                        qrytmp.AddWhere(primaryKeyName, dt.Rows[i][primaryKeyName]);
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            if (dt.Columns[k].ToString().ToLower() != primaryKeyName.ToLower())
                                qrytmp.AddUpdateSetting(dt.Columns[k].ToString(), dt.Rows[i][k]);
                        }
                        qrytmp.QueryType = QueryType.Update;
                        mycmd = qrytmp.BuildUpdateCommand();
                        //}
                    }
                    else
                    {
                        mycmd = new QueryCommand(insertSql, "PowerPOS");

                        for (int k = 0; k < Columns.Count; k++)
                        {

                            if (dt.Columns[Columns[k].ToString()].DataType == System.Type.GetType("System.Guid"))
                            {
                                //check if null don't convert 
                                if (dt.Rows[i][Columns[k].ToString()] == null || dt.Rows[i][Columns[k].ToString()].ToString() == "")
                                {
                                    mycmd.AddParameter(Parameters[k].ToString(),
                                       null, DataService.GetSchema(tableName, "PowerPOS").
                                           GetColumn(Columns[k].ToString()).DataType);
                                }
                                else
                                {
                                    mycmd.AddParameter(Parameters[k].ToString(),
                                        (new Guid(dt.Rows[i][Columns[k].
                                            ToString()].ToString())).ToString(),
                                            DataService.GetSchema(tableName, "PowerPOS").
                                            GetColumn(Columns[k].ToString()).DataType);
                                }
                            }
                            else
                            {
                                mycmd.AddParameter
                                    (Parameters[k].ToString(),
                                    dt.Rows[i][Columns[k].ToString()],
                                    DataService.GetSchema(tableName, "PowerPOS").
                                    GetColumn(Columns[k].ToString()).DataType);
                            }
                        }
                    }
                    SetModifiedOn(mycmd, modifiedOn);
                    cmd.Add(mycmd);
                }
                if (isPKAutoGenerated)
                {
                    mycmd = new QueryCommand("SET IDENTITY_INSERT " + tableName + " OFF;"); //Ignore column 0 if it is identity column
                    cmd.Add(mycmd);
                }
                if (cmd.Count > 0)
                    DataService.ExecuteTransaction(cmd);
                isSuccess = true;
            }
            catch (Exception ex)
            {
                Logger.writeLog(ex);
            }

            return isSuccess;
        }

        public static void SetModifiedOn(QueryCommand cmd, DateTime date)
        {
            for (int i = 0; i < cmd.Parameters.Count; i++)
            {
                if (cmd.Parameters[i].ParameterName == "@ModifiedOn")
                {
                    cmd.Parameters[i].ParameterValue = date;
                }
            }
        }

        public static bool GetLatestModifiedOnLocal(string tableName, out DateTime result)
        {
            result = DateTime.Now;
            try
            {
                string sqlString = "SELECT ISNULL(MAX(ModifiedOn),DATEADD(YEAR,-10,GETDATE())) TheDate FROM " + tableName;
                DataTable dt = new DataTable();
                dt.Load(DataService.GetReader(new QueryCommand(sqlString)));
                if (dt.Rows.Count > 0)
                    result = (DateTime)dt.Rows[0]["TheDate"];
                else
                    result = DateTime.Now;
            }
            catch (Exception ex)
            {
                Logger.writeLog(ex);
            }
            return true;
        }

        public static bool GetLatestModifiedOnLocalByInvLoc(string tableName, out DateTime result)
        {
            result = DateTime.Now;
            try
            {
                string sqlString = "SELECT ISNULL(MAX(ModifiedOn),DATEADD(YEAR,-10,GETDATE())) TheDate FROM " + tableName + " WHERE InventoryLocationID = " + PointOfSaleInfo.InventoryLocationID;
                DataTable dt = new DataTable();
                dt.Load(DataService.GetReader(new QueryCommand(sqlString)));
                if (dt.Rows.Count > 0)
                    result = (DateTime)dt.Rows[0]["TheDate"];
                else
                    result = DateTime.Now;
            }
            catch (Exception ex)
            {
                Logger.writeLog(ex);
            }
            return true;
        }

        public static bool UpdateModifiedOnPOSSetup(out string status)
        {
            status = "";
            try
            {
                string query = @"
                update ItemDepartment Set ModifiedOn = '2010-01-01 00:00:00', ModifiedBy = 'SYSTEM';
                update Category Set ModifiedOn = '2010-01-01 00:00:00', ModifiedBy = 'SYSTEM';
                update Item Set ModifiedOn = '2010-01-01 00:00:00', ModifiedBy = 'SYSTEM';
                update itemGroup Set ModifiedOn = '2010-01-01 00:00:00', ModifiedBy = 'SYSTEM';
                update PromoCampaignHdr Set ModifiedOn = '2010-01-01 00:00:00', ModifiedBy = 'SYSTEM';
                ";

                int result = DataService.ExecuteQuery(new QueryCommand(query));

                return true;
            }
            catch (Exception ex)
            {
                status = "Error update modified on : " + ex.Message;
                Logger.writeLog("Error update modified on : " + ex.Message);

                return false;
            }
        }
    }
}
